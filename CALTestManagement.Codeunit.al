#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Codeunit 130401 "CAL Test Management"
{
    SingleInstance = true;

    trigger OnRun()
    begin
    end;

    var
        Window: Dialog;
        Mode: Option Test,Publish;
        AddingTestCodeunitsMsg: label 'Adding Test Codeunits @1@@@@@@@', Locked=true;
        SelectTestsToRunQst: label 'Active &Line,Active &Codeunit,&All', Locked=true;
        SelectTestsToImportQst: label '&Select Test Codeunits,&All Test Codeunits', Locked=true;
        SelectTestsToImportFromTCMQst: label '&Select Test Codeunits,&All Test Codeunits,&Get Tests Codeunits based on Modified Objects,Get Tests Codeunits based on Selected &Objects', Locked=true;
        SelectCodeunitsToRunQst: label ',Active &Codeunit,&All', Locked=true;
        DefaultTxt: label 'DEFAULT', Locked=true;
        DefaultSuiteTxt: label 'Default Suite - Autogenerated', Locked=true;
        ObjectNotCompiledErr: label 'Object not compiled.', Locked=true;
        WindowUpdateDateTime: DateTime;
        NoOfRecords: Integer;
        i: Integer;
        AddingTestsBasedOnChurnMsg: label 'Adding %1 test codeunits based on churn @1@@@@@@@', Locked=true;
        NoModifiedObjectsFoundMsg: label 'No modified objects found.', Locked=true;


    procedure SetPublishMode()
    begin
        Mode := Mode::Publish;
    end;


    procedure SetTestMode()
    begin
        Mode := Mode::Test;
    end;


    procedure IsPublishMode(): Boolean
    begin
        exit(Mode = Mode::Publish);
    end;


    procedure IsTestMode(): Boolean
    begin
        exit(Mode = Mode::Test);
    end;


    procedure DoesTestCodeunitExist(ID: Integer): Boolean
    var
        AllObjWithCaption: Record AllObjWithCaption;
    begin
        AllObjWithCaption.Reset;
        AllObjWithCaption.SetRange("Object ID",ID);
        AllObjWithCaption.SetRange("Object Type",AllObjWithCaption."object type"::Codeunit);
        AllObjWithCaption.SetRange("Object Subtype",'Test');
        exit(not AllObjWithCaption.IsEmpty);
    end;


    procedure GetTestCodeunitsSelection(CALTestSuite: Record "CAL Test Suite")
    var
        CALTestLine: Record "CAL Test Line";
        AllObjWithCaption: Record AllObjWithCaption;
        TempAllObjWithCaption: Record AllObjWithCaption temporary;
        CALTestCoverageMap: Record "CAL Test Coverage Map";
        CALTestGetCodeunits: Page "CAL Test Get Codeunits";
        Selection: Integer;
    begin
        if CALTestCoverageMap.IsEmpty then
          Selection := StrMenu(SelectTestsToImportQst,1)
        else
          Selection := StrMenu(SelectTestsToImportFromTCMQst,1);

        if Selection = 0 then
          exit;

        case Selection of
          1:
            begin
              CALTestGetCodeunits.LookupMode := true;
              if CALTestGetCodeunits.RunModal = Action::LookupOK then begin
                CALTestGetCodeunits.SetSelectionFilter(AllObjWithCaption);
                AddTestCodeunits(CALTestSuite,AllObjWithCaption);
              end;
            end;
          2:
            begin
              CALTestLine.SetRange("Test Suite",CALTestSuite.Name);
              CALTestLine.DeleteAll(true);
              if GetTestCodeunits(TempAllObjWithCaption) then
                RefreshSuite(CALTestSuite,TempAllObjWithCaption);
            end;
          3:
            GetTestCodeunitsForModifiedObjects(CALTestSuite.Name);
          4:
            GetTestCodeunitsForSelectedObjects(CALTestSuite.Name);
        end;
    end;

    local procedure GetTestCodeunits(var ToAllObjWithCaption: Record AllObjWithCaption): Boolean
    var
        FromAllObjWithCaption: Record AllObjWithCaption;
    begin
        with ToAllObjWithCaption do begin
          FromAllObjWithCaption.SetRange("Object Type","object type"::Codeunit);
          FromAllObjWithCaption.SetRange("Object Subtype",'Test');
          if FromAllObjWithCaption.Find('-') then
            repeat
              ToAllObjWithCaption := FromAllObjWithCaption;
              Insert;
            until FromAllObjWithCaption.Next = 0;
        end;

        exit(ToAllObjWithCaption.Find('-'));
    end;

    local procedure GetTestCodeunitsForObjects(var "Object": Record "Object";CALTestSuiteName: Code[10])
    var
        TempMissingCUId: Record "Integer" temporary;
        TempTestCodeunitID: Record "Integer" temporary;
        CALTestMissingCodeunits: Page "CAL Test Missing Codeunits";
        TestLineNo: Integer;
        TestCodeunitsNumber: Integer;
    begin
        Object.SetFilter(Type,'<>%1',Object.Type::TableData);
        if Object.FindSet then begin
          TestCodeunitsNumber := GetTotalTestCodeunitIDs(Object,TempTestCodeunitID);
          OpenWindow(StrSubstNo(AddingTestsBasedOnChurnMsg,TestCodeunitsNumber),TestCodeunitsNumber);
          TestLineNo := GetLastTestLineNo(CALTestSuiteName);
          if TempTestCodeunitID.FindSet then
            repeat
              if DoesTestCodeunitExist(TempTestCodeunitID.Number) then begin
                if not TestLineExists(CALTestSuiteName,TempTestCodeunitID.Number) then begin
                  TestLineNo := TestLineNo + 10000;
                  AddTestLine(CALTestSuiteName,TempTestCodeunitID.Number,TestLineNo);
                  UpdateWindow;
                end
              end else begin
                TempMissingCUId.Number := TempTestCodeunitID.Number;
                TempMissingCUId.Insert;
              end;
            until TempTestCodeunitID.Next = 0;
          Window.Close;
        end else
          Message(NoModifiedObjectsFoundMsg);

        if not TempMissingCUId.IsEmpty then begin
          Commit;
          CALTestMissingCodeunits.Initialize(TempMissingCUId,CALTestSuiteName);
          CALTestMissingCodeunits.RunModal;
        end;
    end;

    local procedure GetTestCodeunitsForModifiedObjects(CALTestSuiteName: Code[10])
    var
        "Object": Record "Object";
    begin
        Object.SetRange(Modified,true);
        GetTestCodeunitsForObjects(Object,CALTestSuiteName);
    end;

    local procedure GetTestCodeunitsForSelectedObjects(CALTestSuiteName: Code[10])
    var
        "Object": Record "Object";
        CALTestObjectsToSelect: Page "CAL Test Objects To Select";
    begin
        CALTestObjectsToSelect.LookupMode := true;
        CALTestObjectsToSelect.SetTableview(Object);
        if CALTestObjectsToSelect.RunModal = Action::LookupOK then begin
          CALTestObjectsToSelect.SetSelectionFilter(Object);
          GetTestCodeunitsForObjects(Object,CALTestSuiteName);
        end;
    end;

    local procedure GetTotalTestCodeunitIDs(var "Object": Record "Object";var TestCodeunitID: Record "Integer"): Integer
    var
        CALTestCoverageMap: Record "CAL Test Coverage Map";
    begin
        repeat
          CALTestCoverageMap.Reset;
          CALTestCoverageMap.SetRange("Object ID",Object.ID);
          CALTestCoverageMap.SetRange("Object Type",Object.Type);
          if CALTestCoverageMap.FindSet then
            repeat
              if not TestCodeunitID.Get(CALTestCoverageMap."Test Codeunit ID") then begin
                TestCodeunitID.Number := CALTestCoverageMap."Test Codeunit ID";
                TestCodeunitID.Insert;
              end;
            until CALTestCoverageMap.Next = 0;
        until Object.Next = 0;
        exit(TestCodeunitID.Count);
    end;

    local procedure GetLastTestLineNo(TestSuiteName: Code[10]) LineNo: Integer
    var
        CALTestLine: Record "CAL Test Line";
    begin
        CALTestLine.SetRange("Test Suite",TestSuiteName);
        if CALTestLine.FindLast then
          LineNo := CALTestLine."Line No.";
    end;


    procedure CreateNewSuite(var NewSuiteName: Code[10])
    var
        CALTestSuite: Record "CAL Test Suite";
    begin
        with CALTestSuite do begin
          NewSuiteName := DefaultTxt;
          Init;
          Validate(Name,NewSuiteName);
          Validate(Description,DefaultSuiteTxt);
          Validate(Export,false);
          Insert(true);
        end;
    end;

    local procedure RefreshSuite(CALTestSuite: Record "CAL Test Suite";var AllObjWithCaption: Record AllObjWithCaption)
    var
        CALTestLine: Record "CAL Test Line";
        LineNo: Integer;
    begin
        with CALTestLine do begin
          LineNo := LineNo + 10000;

          Init;
          Validate("Test Suite",CALTestSuite.Name);
          Validate("Line No.",LineNo);
          Validate("Line Type","line type"::Group);
          Validate(Name,DefaultSuiteTxt);
          Validate(Run,true);
          Insert(true);

          AddTestCodeunits(CALTestSuite,AllObjWithCaption);
        end;
    end;


    procedure AddTestCodeunits(CALTestSuite: Record "CAL Test Suite";var AllObjWithCaption: Record AllObjWithCaption)
    var
        TestLineNo: Integer;
    begin
        if AllObjWithCaption.Find('-') then begin
          TestLineNo := GetLastTestLineNo(CALTestSuite.Name);
          OpenWindow(AddingTestCodeunitsMsg,AllObjWithCaption.Count);
          repeat
            TestLineNo := TestLineNo + 10000;
            AddTestLine(CALTestSuite.Name,AllObjWithCaption."Object ID",TestLineNo);
            UpdateWindow;
          until AllObjWithCaption.Next = 0;
          Window.Close;
        end;
    end;


    procedure AddMissingTestCodeunits(var TestCodeunitIds: Record "Integer";TestSuiteName: Code[10])
    var
        "Object": Record "Object";
        TestLineNo: Integer;
    begin
        TestLineNo := GetLastTestLineNo(TestSuiteName);
        OpenWindow(StrSubstNo(AddingTestsBasedOnChurnMsg,TestCodeunitIds.Count),TestCodeunitIds.Count);

        repeat
          Object.SetRange(Type,Object.Type::Codeunit);
          Object.SetRange(ID,TestCodeunitIds.Number);
          if Object.FindFirst then begin
            TestLineNo := TestLineNo + 10000;
            AddTestLine(TestSuiteName,Object.ID,TestLineNo);
            UpdateWindow;
            TestCodeunitIds.Delete;
          end;
        until TestCodeunitIds.Next = 0;

        Window.Close;
    end;

    local procedure AddTestLine(TestSuiteName: Code[10];TestCodeunitId: Integer;LineNo: Integer)
    var
        CALTestLine: Record "CAL Test Line";
        AllObj: Record AllObj;
        "Object": Record "Object";
        CodeunitIsValid: Boolean;
    begin
        with CALTestLine do begin
          if TestLineExists(TestSuiteName,TestCodeunitId) then
            exit;

          Init;
          Validate("Test Suite",TestSuiteName);
          Validate("Line No.",LineNo);
          Validate("Line Type","line type"::Codeunit);
          Validate("Test Codeunit",TestCodeunitId);
          Validate(Run,true);

          Insert(true);

          AllObj.SetRange("Object Type",AllObj."object type"::Codeunit);
          AllObj.SetRange("Object ID",TestCodeunitId);
          if Format(AllObj."App Package ID") <> '' then
            CodeunitIsValid := true;

          if not CodeunitIsValid then begin
            Object.SetRange(Type,Object.Type::Codeunit);
            Object.SetRange(ID,TestCodeunitId);
            CodeunitIsValid := Object.FindFirst;
          end;

          if CodeunitIsValid then begin
            SetPublishMode;
            SetRecfilter;
            Codeunit.Run(Codeunit::"CAL Test Runner",CALTestLine);
          end else begin
            Validate(Result,Result::Failure);
            Validate("First Error",ObjectNotCompiledErr);
            Modify(true);
          end;
        end;
    end;

    local procedure TestLineExists(TestSuiteName: Code[10];TestCodeunitId: Integer): Boolean
    var
        CALTestLine: Record "CAL Test Line";
    begin
        CALTestLine.SetRange("Test Suite",TestSuiteName);
        CALTestLine.SetRange("Test Codeunit",TestCodeunitId);
        exit(not CALTestLine.IsEmpty);
    end;


    procedure ExtendTestCoverage(TestCodeunitId: Integer)
    var
        CodeCoverage: Record "Code Coverage";
        CALTestCoverageMap: Record "CAL Test Coverage Map";
    begin
        CodeCoverage.SetRange("Line Type",CodeCoverage."line type"::Object);
        if CodeCoverage.FindSet then
          repeat
            if not CALTestCoverageMap.Get(TestCodeunitId,CodeCoverage."Object Type",CodeCoverage."Object ID") then begin
              CALTestCoverageMap.Init;
              CALTestCoverageMap."Test Codeunit ID" := TestCodeunitId;
              CALTestCoverageMap."Object Type" := CodeCoverage."Object Type";
              CALTestCoverageMap."Object ID" := CodeCoverage."Object ID";
              CALTestCoverageMap.Insert;
            end;
          until CodeCoverage.Next = 0;
    end;

    local procedure GetLineNoFilter(CALTestLine: Record "CAL Test Line";Selection: Option ,"Function","Codeunit") LineNoFilter: Text
    var
        NoOfFunctions: Integer;
    begin
        LineNoFilter := '';
        case Selection of
          Selection::"Function":
            begin
              CALTestLine.TestField("Line Type",CALTestLine."line type"::"Function");
              LineNoFilter := Format(CALTestLine."Line No.");
              CALTestLine.Reset;
              CALTestLine.SetRange("Test Suite",CALTestLine."Test Suite");
              CALTestLine.SetRange("Test Codeunit",CALTestLine."Test Codeunit");
              CALTestLine.SetFilter("Function",'OnRun|%1','');
              CALTestLine.FindSet;
              repeat
                LineNoFilter := LineNoFilter + '|' + Format(CALTestLine."Line No.");
              until CALTestLine.Next = 0;
            end;
          Selection::Codeunit:
            LineNoFilter :=
              StrSubstNo('%1..%2',CALTestLine.GetMinCodeunitLineNo,CALTestLine.GetMaxCodeunitLineNo(NoOfFunctions));
        end;
    end;


    procedure RunSelected(var CurrCALTestLine: Record "CAL Test Line")
    var
        CALTestLine: Record "CAL Test Line";
        CodeunitIsMarked: Boolean;
        LastCodeunitID: Integer;
        LineNoFilter: Text;
        Selection: Option ,"Function","Codeunit";
        Separator: Text[1];
    begin
        if CurrCALTestLine.IsEmpty then
          exit;
        CALTestLine.Copy(CurrCALTestLine);
        Separator := '';
        LineNoFilter := '';
        CALTestLine.FindSet;
        repeat
          if CALTestLine."Line Type" = CALTestLine."line type"::Codeunit then begin
            LineNoFilter := LineNoFilter + Separator + GetLineNoFilter(CALTestLine,Selection::Codeunit);
            LastCodeunitID := CALTestLine."Test Codeunit";
            CodeunitIsMarked := true;
          end else begin
            if LastCodeunitID <> CALTestLine."Test Codeunit" then begin
              LastCodeunitID := CALTestLine."Test Codeunit";
              LineNoFilter := LineNoFilter + Separator + GetLineNoFilter(CALTestLine,Selection::"Function");
              CodeunitIsMarked := false;
            end else
              if not CodeunitIsMarked then
                LineNoFilter := LineNoFilter + Separator + Format(CALTestLine."Line No.")
          end;
          Separator := '|';
        until CALTestLine.Next = 0;

        CALTestLine.Reset;
        CALTestLine.SetRange("Test Suite",CurrCALTestLine."Test Suite");
        CALTestLine.SetFilter("Line No.",LineNoFilter);
        RunSuite(CALTestLine,true);
    end;


    procedure RunSuiteYesNo(var CurrCALTestLine: Record "CAL Test Line")
    var
        CALTestLine: Record "CAL Test Line";
        Selection: Option ,"Function","Codeunit";
        LineNoFilter: Text;
    begin
        if CurrCALTestLine.IsEmpty then
          exit;
        CALTestLine.Copy(CurrCALTestLine);
        if CALTestLine."Line Type" = CALTestLine."line type"::Codeunit then
          Selection := StrMenu(SelectCodeunitsToRunQst,2)
        else
          Selection := StrMenu(SelectTestsToRunQst,1);

        if Selection = 0 then
          exit;

        LineNoFilter := GetLineNoFilter(CALTestLine,Selection);
        if LineNoFilter <> '' then
          CALTestLine.SetFilter("Line No.",LineNoFilter);
        RunSuite(CALTestLine,true);
    end;


    procedure RunSuite(var CALTestLine: Record "CAL Test Line";IsTestMode: Boolean)
    var
        CALTestLine2: Record "CAL Test Line";
        CALTestRunner: Codeunit "CAL Test Runner";
    begin
        if IsTestMode then begin
          SetTestMode;
          CALTestRunner.Run(CALTestLine);
        end else begin
          SetPublishMode;
          CALTestLine2.Copy(CALTestLine);
          CALTestLine2.SetRange("Line No.",CALTestLine."Line No.");
          CALTestLine2.TestField("Test Codeunit");
          CALTestLine2.TestField("Function",'');

          CALTestLine.DeleteChildren;
          CALTestLine2.DeleteChildren;

          CALTestRunner.Run(CALTestLine2);
        end;
        Clear(CALTestRunner);
    end;

    local procedure OpenWindow(DisplayText: Text;NoOfRecords2: Integer)
    begin
        i := 0;
        NoOfRecords := NoOfRecords2;
        WindowUpdateDateTime := CurrentDatetime;
        Window.Open(DisplayText);
    end;

    local procedure UpdateWindow()
    begin
        i := i + 1;
        if CurrentDatetime - WindowUpdateDateTime >= 1000 then begin
          WindowUpdateDateTime := CurrentDatetime;
          Window.Update(1,ROUND(i / NoOfRecords * 10000,1));
        end;
    end;


    procedure EnableTestToRun()
    var
        CALTestEnabledCodeunit: Record "CAL Test Enabled Codeunit";
        AllObjWithCaption: Record AllObjWithCaption;
    begin
        CALTestEnabledCodeunit.DeleteAll;
        AllObjWithCaption.SetRange("Object Type",AllObjWithCaption."object type"::Codeunit);
        AllObjWithCaption.SetRange("Object Subtype",'Test');
        if AllObjWithCaption.FindSet then
          repeat
            CALTestEnabledCodeunit.Init;
            CALTestEnabledCodeunit."Test Codeunit ID" := AllObjWithCaption."Object ID";
            CALTestEnabledCodeunit.Insert;
          until AllObjWithCaption.Next = 0;
    end;


    procedure ExportTCM(FileName: Text)
    var
        CALTestCoverageMap: XmlPort "CAL Test Coverage Map";
        OutStream: OutStream;
        File: File;
    begin
        if FileName = '' then
          exit;

        if Exists(FileName) then
          Erase(FileName);

        if File.Create(FileName) then begin
          File.CreateOutstream(OutStream);
          CALTestCoverageMap.SetDestination(OutStream);
          CALTestCoverageMap.ImportFile(false);
          CALTestCoverageMap.Export;
          File.Close;
        end;
    end;


    procedure ExportTestResults(FileName: Text;SkipPassed: Boolean;LastTestRun: Boolean)
    var
        CALExportTestResult: XmlPort "CAL Export Test Result";
        OutStream: OutStream;
        File: File;
    begin
        if FileName = '' then
          exit;

        if Exists(FileName) then
          Erase(FileName);

        if File.Create(FileName) then begin
          File.CreateOutstream(OutStream);
          CALExportTestResult.SetParam(SkipPassed,LastTestRun);
          CALExportTestResult.SetDestination(OutStream);
          CALExportTestResult.ImportFile(false);
          CALExportTestResult.Export;
          File.Close;
        end;
    end;


    procedure ImportTestToRun(FileName: Text;Clean: Boolean)
    var
        CALTestEnabledCodeunit: Record "CAL Test Enabled Codeunit";
        CALImportEnabledCodeunit: XmlPort "CAL Import Enabled Codeunit";
        InStream: InStream;
        File: File;
    begin
        if FileName = '' then
          exit;

        if not Exists(FileName) then
          exit;

        if Clean then
          CALTestEnabledCodeunit.DeleteAll;

        File.WriteMode(false);
        File.Open(FileName);
        File.CreateInstream(InStream);
        CALImportEnabledCodeunit.SetSource(InStream);
        CALImportEnabledCodeunit.ImportFile(true);
        CALImportEnabledCodeunit.Import;
        File.Close;
    end;
}

